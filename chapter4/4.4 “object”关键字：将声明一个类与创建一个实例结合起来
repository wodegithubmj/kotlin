4.4 object关键字定义一个类并创建一个实例。它用于：
    定义单例。
    伴生对象。
    对象表达式。
    
    4.4.1 对象声明：创建单例易如反掌
          对象声明由于已经创建过单例，所以不允许再使用构造方法。
          
    4.4.2 伴生对象：工厂方法和静态成员的地盘
          在类中定义对象使用companion关键字标记，就可以通过容器类名访问这个对象的方法和属性，有点类似Java的静态方法的调用。
          通过把主构造方法私有化，再用companion关键字，可以实现工厂方法。
          
    4.4.3 作为普通对象使用的伴生对象
    
    4.4.4 对象表达式：改变写法的匿名内部类
          与Java匿名内部类只能扩展一个类或者实现一个接口不同，Kotlin的匿名内部类可以实现多个接口或者不实现接口。
          与对象声明不同，匿名对象不是单例的，每次对象表达式被执行都会创建一个新的对象实例。
          
          与Java匿名类一样，对象表达式中的代码可以访问创建它的函数对象，但访问并没有被限制在final变量，还可在对象表达式中修改变量的值。
          
          fun countClicks(window:Window) {
            var clickCount = 0 //声明局部变量
            
            window.addMouseListener(object: MouseAdapter() {
                override fun mouseClicked(e: MouseEvent) {
                clickCount++ //更新变量的值
                }
            })
          }
          
          
