4.1 定义类的继承结构
    
    4.1.1 Kotlin的接口
          接口可以包含抽象方法的定义和非抽象方法的实现。
          
          interface Clickable{
              fun click()
          }
          
          class Button : Clickable {
              override fun click() = println("I was clicked")
          }
      
     4.1.2 open、final和abstract修饰符：默认为final
           如果你想允许一个类或者方法被集成或者重写，需要用 open 修饰符来标示这个类。
           
     4.1.3 可见性修饰符：默认为public
           Kotlin的可见性修饰符与Java类似，但是Kotlin中默认的是public。
           Kotlin提供了一种新的修饰符，internal，表示“只在模块中可见”。一个模块就是一组一起编译的Kotlin文件。
           Kotlin中的protected成员只在类和它的子类中可见，与Java中的不同。
           Kotlin中和Java中的可见性的又一个区别是外部类不能看到其内部类中的private成员。
      
     4.1.4 内部类和嵌套类：默认是嵌套类
           Kotlin的嵌套类不能访问外部类的实例。
           
           嵌套类和内部类在Java与Kotlin中的对应关系
           
           类A在另一个类B中声明          在Java中          在Kotlin中
           嵌套类（不存储外部类的引用）   static class A    class A
           内部类（存储外部类的引用）     class A           inner class A
           
           在Kotlin中，需要使用this@Outer从Inner类去访问Outer类：
           
           class Outer {
                inner class Inner {
                    fun getOuterReference(): Outer = this@Outer
                }
           }
           
      4.1.5 密封类：定义受限的类继承结构
